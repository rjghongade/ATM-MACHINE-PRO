{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMavkzZO4DLQkoRlddcOcHd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rjghongade/ATM-MACHINE-PRO/blob/main/btc_usd.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "yvM2KSHU_K4z"
      },
      "outputs": [],
      "source": [
        "#import the libary\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sb\n",
        " \n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn import metrics\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 3267
        },
        "id": "R3cqUJ6CHmIl",
        "outputId": "dc4428a8-90c2-4a8b-e51e-cf7100806bf3"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-bf679e14-7d64-4617-b0b9-c09ae7f29c7e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-bf679e14-7d64-4617-b0b9-c09ae7f29c7e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving dot.csv to dot (1).csv\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'dot.csv': b'Date,Open,High,Low,Close,Adj Close,Volume\\n2022-02-07,42406.781250,44401.863281,41748.156250,43840.285156,43840.285156,28641855926\\n2022-02-08,43854.652344,45293.867188,42807.835938,44118.445313,44118.445313,33079398868\\n2022-02-09,44096.703125,44727.800781,43232.968750,44338.796875,44338.796875,23245887300\\n2022-02-10,44347.800781,45661.171875,43402.808594,43565.113281,43565.113281,32142048537\\n2022-02-11,43571.128906,43810.832031,42114.539063,42407.937500,42407.937500,26954925781\\n2022-02-12,42412.300781,42992.550781,41852.574219,42244.468750,42244.468750,18152390304\\n2022-02-13,42236.566406,42693.054688,41950.941406,42197.515625,42197.515625,14741589015\\n2022-02-14,42157.398438,42775.777344,41681.957031,42586.917969,42586.917969,20827783012\\n2022-02-15,42586.464844,44667.218750,42491.035156,44575.203125,44575.203125,22721659051\\n2022-02-16,44578.277344,44578.277344,43456.691406,43961.859375,43961.859375,19792547657\\n2022-02-17,43937.070313,44132.972656,40249.371094,40538.011719,40538.011719,26246662813\\n2022-02-18,40552.132813,40929.152344,39637.617188,40030.976563,40030.976563,23310007704\\n2022-02-19,40026.023438,40418.878906,39713.058594,40122.156250,40122.156250,13736557863\\n2022-02-20,40118.101563,40119.890625,38112.812500,38431.378906,38431.378906,18340576452\\n2022-02-21,38423.210938,39394.437500,36950.476563,37075.281250,37075.281250,29280402798\\n2022-02-22,37068.769531,38359.855469,36488.933594,38286.027344,38286.027344,25493150450\\n2022-02-23,38285.281250,39122.394531,37201.816406,37296.570313,37296.570313,21849073843\\n2022-02-24,37278.566406,38968.839844,34459.218750,38332.609375,38332.609375,46383802093\\n2022-02-25,38333.746094,39630.324219,38111.343750,39214.218750,39214.218750,26545599159\\n2022-02-26,39213.082031,40005.347656,38702.535156,39105.148438,39105.148438,17467554129\\n2022-02-27,39098.699219,39778.941406,37268.976563,37709.785156,37709.785156,23450127612\\n2022-02-28,37706.000000,43760.457031,37518.214844,43193.234375,43193.234375,35690014104\\n2022-03-01,43194.503906,44793.601563,42952.585938,44354.636719,44354.636719,32479047645\\n2022-03-02,44357.617188,45077.578125,43432.851563,43924.117188,43924.117188,29183112630\\n2022-03-03,43925.195313,44021.578125,41914.750000,42451.789063,42451.789063,24967782593\\n2022-03-04,42458.140625,42479.613281,38805.847656,39137.605469,39137.605469,28516271427\\n2022-03-05,39148.449219,39566.335938,38777.035156,39400.585938,39400.585938,16975917450\\n2022-03-06,39404.199219,39640.175781,38211.648438,38419.984375,38419.984375,19745229902\\n2022-03-07,38429.304688,39430.226563,37260.203125,38062.039063,38062.039063,28546143503\\n2022-03-08,38059.902344,39304.441406,37957.386719,38737.269531,38737.269531,25776583476\\n2022-03-09,38742.816406,42465.671875,38706.093750,41982.925781,41982.925781,32284121034\\n2022-03-10,41974.070313,42004.726563,38832.941406,39437.460938,39437.460938,31078064711\\n2022-03-11,39439.968750,40081.679688,38347.433594,38794.972656,38794.972656,26364890465\\n2022-03-12,38794.464844,39308.597656,38772.535156,38904.011719,38904.011719,14616450657\\n2022-03-13,38884.726563,39209.351563,37728.144531,37849.664063,37849.664063,17300745310\\n2022-03-14,37846.316406,39742.500000,37680.734375,39666.753906,39666.753906,24322159070\\n2022-03-15,39664.250000,39794.628906,38310.210938,39338.785156,39338.785156,23934000868\\n2022-03-16,39335.570313,41465.453125,39022.347656,41143.929688,41143.929688,39616916192\\n2022-03-17,41140.843750,41287.535156,40662.871094,40951.378906,40951.378906,22009601093\\n2022-03-18,40944.839844,42195.746094,40302.398438,41801.156250,41801.156250,34421564942\\n2022-03-19,41794.648438,42316.554688,41602.667969,42190.652344,42190.652344,19664853187\\n2022-03-20,42191.406250,42241.164063,41004.757813,41247.824219,41247.824219,20127946682\\n2022-03-21,41246.132813,41454.410156,40668.042969,41077.996094,41077.996094,24615543271\\n2022-03-22,41074.105469,43124.707031,40948.281250,42358.808594,42358.808594,32004652376\\n2022-03-23,42364.378906,42893.507813,41877.507813,42892.957031,42892.957031,25242943069\\n2022-03-24,42886.652344,44131.855469,42726.164063,43960.933594,43960.933594,31042992291\\n2022-03-25,43964.546875,44999.492188,43706.285156,44348.730469,44348.730469,30574413034\\n2022-03-26,44349.859375,44735.996094,44166.273438,44500.828125,44500.828125,16950455995\\n2022-03-27,44505.355469,46827.546875,44437.292969,46820.492188,46820.492188,28160889722\\n2022-03-28,46821.851563,48086.835938,46690.203125,47128.003906,47128.003906,36362175703\\n2022-03-29,47100.437500,48022.289063,47100.437500,47465.730469,47465.730469,31397059069\\n2022-03-30,47456.898438,47655.148438,46746.210938,47062.664063,47062.664063,29333883962\\n2022-03-31,47062.148438,47512.027344,45390.539063,45538.675781,45538.675781,33327427106\\n2022-04-01,45554.164063,46616.242188,44403.140625,46281.644531,46281.644531,38162644287\\n2022-04-02,46285.500000,47028.281250,45782.511719,45868.949219,45868.949219,29336594194\\n2022-04-03,45859.128906,47313.476563,45634.105469,46453.566406,46453.566406,25414397610\\n2022-04-04,46445.273438,46791.089844,45235.816406,46622.675781,46622.675781,32499785455\\n2022-04-05,46624.507813,47106.140625,45544.808594,45555.992188,45555.992188,29640604055\\n2022-04-06,45544.355469,45544.355469,43193.953125,43206.738281,43206.738281,39393395788\\n2022-04-07,43207.500000,43860.699219,42899.906250,43503.847656,43503.847656,26101973106\\n2022-04-08,43505.136719,43903.019531,42183.289063,42287.664063,42287.664063,27215995394\\n2022-04-09,42282.078125,42786.816406,42183.253906,42782.136719,42782.136719,16050772496\\n2022-04-10,42781.089844,43376.378906,42021.207031,42207.671875,42207.671875,17654475582\\n2022-04-11,42201.039063,42424.589844,39373.058594,39521.902344,39521.902344,33949912166\\n2022-04-12,39533.714844,40617.585938,39388.328125,40127.183594,40127.183594,30991500854\\n2022-04-13,40123.570313,41430.054688,39712.746094,41166.730469,41166.730469,27691105228\\n2022-04-14,41160.218750,41451.480469,39695.746094,39935.515625,39935.515625,24342001973\\n2022-04-15,39939.402344,40617.722656,39866.832031,40553.464844,40553.464844,21756855753\\n2022-04-16,40552.316406,40633.679688,40078.425781,40424.484375,40424.484375,16833150693\\n2022-04-17,40417.777344,40570.726563,39620.894531,39716.953125,39716.953125,19087633042\\n2022-04-18,39721.203125,40986.320313,38696.191406,40826.214844,40826.214844,33705182072\\n2022-04-19,40828.175781,41672.960938,40618.632813,41502.750000,41502.750000,25303206547\\n2022-04-20,41501.746094,42126.300781,40961.097656,41374.378906,41374.378906,27819532341\\n2022-04-21,41371.515625,42893.582031,40063.828125,40527.363281,40527.363281,35372786395\\n2022-04-22,40525.863281,40777.757813,39315.417969,39740.320313,39740.320313,28011716745\\n2022-04-23,39738.722656,39935.859375,39352.203125,39486.730469,39486.730469,16138021249\\n2022-04-24,39478.375000,39845.925781,39233.539063,39469.292969,39469.292969,17964398167\\n2022-04-25,39472.605469,40491.753906,38338.378906,40458.308594,40458.308594,35445730570\\n2022-04-26,40448.421875,40713.890625,37884.984375,38117.460938,38117.460938,34569088416\\n2022-04-27,38120.300781,39397.917969,37997.312500,39241.121094,39241.121094,30981015184\\n2022-04-28,39241.429688,40269.464844,38941.421875,39773.828125,39773.828125,33903704907\\n2022-04-29,39768.617188,39887.269531,38235.535156,38609.824219,38609.824219,30882994649\\n2022-04-30,38605.859375,38771.210938,37697.941406,37714.875000,37714.875000,23895713731\\n2022-05-01,37713.265625,38627.859375,37585.789063,38469.093750,38469.093750,27002760110\\n2022-05-02,38472.187500,39074.972656,38156.562500,38529.328125,38529.328125,32922642426\\n2022-05-03,38528.109375,38629.996094,37585.621094,37750.453125,37750.453125,27326943244\\n2022-05-04,37748.011719,39902.949219,37732.058594,39698.371094,39698.371094,36754404490\\n2022-05-05,39695.746094,39789.281250,35856.515625,36575.140625,36575.140625,43106256317\\n2022-05-06,36573.183594,36624.359375,35482.132813,36040.921875,36040.921875,37795577489\\n2022-05-07,36042.503906,36129.925781,34940.824219,35501.953125,35501.953125,24375896406\\n2022-05-08,35502.941406,35502.941406,33878.964844,34059.265625,34059.265625,36763041910\\n2022-05-09,34060.015625,34222.074219,30296.953125,30296.953125,30296.953125,63355494961\\n2022-05-10,30273.654297,32596.308594,29944.802734,31022.906250,31022.906250,59811038817\\n2022-05-11,31016.183594,32013.402344,28170.414063,28936.355469,28936.355469,70388855818\\n2022-05-12,28936.734375,30032.439453,26350.490234,29047.751953,29047.751953,66989173272\\n2022-05-13,29030.910156,30924.802734,28782.330078,29283.103516,29283.103516,42841124537\\n2022-05-14,29285.642578,30192.802734,28702.910156,30101.265625,30101.265625,28579868620\\n2022-05-15,30098.585938,31308.191406,29527.740234,31305.113281,31305.113281,25835372065\\n2022-05-16,31304.375000,31305.341797,29251.884766,29862.917969,29862.917969,32613897286\\n2022-05-17,29862.408203,30694.490234,29570.302734,30425.857422,30425.857422,29101473475\\n2022-05-18,30424.478516,30618.716797,28720.271484,28720.271484,28720.271484,31285268319\\n2022-05-19,28720.359375,30430.751953,28708.955078,30314.333984,30314.333984,33773447707\\n2022-05-20,30311.119141,30664.976563,28793.605469,29200.740234,29200.740234,30749382605\\n2022-05-21,29199.859375,29588.869141,29027.394531,29432.226563,29432.226563,17274840442\\n2022-05-22,29432.472656,30425.861328,29275.183594,30323.722656,30323.722656,21631532270\\n2022-05-23,30309.396484,30590.585938,28975.560547,29098.910156,29098.910156,31483454557\\n2022-05-24,29101.125000,29774.355469,28786.589844,29655.585938,29655.585938,26616506245\\n2022-05-25,29653.134766,30157.785156,29384.949219,29562.361328,29562.361328,27525063551\\n2022-05-26,29564.777344,29834.160156,28261.906250,29267.224609,29267.224609,36774325352\\n2022-05-27,29251.140625,29346.943359,28326.613281,28627.574219,28627.574219,36582005748\\n2022-05-28,28622.625000,28814.900391,28554.566406,28814.900391,28814.900391,35519577634\\n2022-05-29,29019.867188,29498.009766,28841.107422,29445.957031,29445.957031,18093886409\\n2022-05-30,29443.365234,31949.630859,29303.572266,31726.390625,31726.390625,39277993274\\n2022-05-31,31723.865234,32249.863281,31286.154297,31792.310547,31792.310547,33538210634\\n2022-06-01,31792.554688,31957.285156,29501.587891,29799.080078,29799.080078,41135817341\\n2022-06-02,29794.890625,30604.734375,29652.705078,30467.488281,30467.488281,29083562061\\n2022-06-03,30467.806641,30633.035156,29375.689453,29704.390625,29704.390625,26175547452\\n2022-06-04,29706.138672,29930.564453,29500.005859,29832.914063,29832.914063,16588370958\\n2022-06-05,29835.117188,30117.744141,29574.449219,29906.662109,29906.662109,17264085441\\n2022-06-06,29910.283203,31693.291016,29894.187500,31370.671875,31370.671875,31947336829\\n2022-06-07,31371.742188,31489.683594,29311.683594,31155.478516,31155.478516,40770974039\\n2022-06-08,31151.480469,31253.691406,29944.404297,30214.355469,30214.355469,30242059107\\n2022-06-09,30215.279297,30609.310547,30020.265625,30111.998047,30111.998047,21692004719\\n2022-06-10,30110.330078,30245.808594,28978.146484,29083.804688,29083.804688,29867476527\\n2022-06-11,29084.666016,29401.916016,28236.212891,28360.810547,28360.810547,27246574439\\n2022-06-12,28373.513672,28502.685547,26762.648438,26762.648438,26762.648438,34163220274\\n2022-06-13,26737.578125,26795.589844,22141.257813,22487.388672,22487.388672,68204556440\\n2022-06-14,22487.986328,23018.951172,20950.818359,22206.792969,22206.792969,50913575242\\n2022-06-15,22196.730469,22642.671875,20178.376953,22572.839844,22572.839844,54912007015\\n2022-06-16,22576.304688,22868.921875,20265.226563,20381.650391,20381.650391,31183975654\\n2022-06-17,20385.718750,21243.312500,20326.519531,20471.482422,20471.482422,27132421514\\n2022-06-18,20473.425781,20736.041016,17708.623047,19017.642578,19017.642578,42009436760\\n2022-06-19,19010.902344,20683.822266,18067.152344,20553.271484,20553.271484,35329942625\\n2022-06-20,20553.371094,20913.322266,19689.169922,20599.537109,20599.537109,30818458597\\n2022-06-21,20594.294922,21620.628906,20415.062500,20710.597656,20710.597656,28970212744\\n2022-06-22,20719.414063,20835.750000,19848.078125,19987.029297,19987.029297,28574793478\\n2022-06-23,19986.607422,21135.761719,19950.117188,21085.876953,21085.876953,26188097173\\n2022-06-24,21084.648438,21472.917969,20777.511719,21231.656250,21231.656250,24957784918\\n2022-06-25,21233.609375,21520.914063,20964.585938,21502.337891,21502.337891,18372538715\\n2022-06-26,21496.494141,21783.724609,21016.269531,21027.294922,21027.294922,18027170497\\n2022-06-27,21028.238281,21478.089844,20620.199219,20735.478516,20735.478516,20965695707\\n2022-06-28,20731.544922,21164.423828,20228.812500,20280.634766,20280.634766,21381535161\\n2022-06-29,20281.169922,20364.156250,19937.791016,20104.023438,20104.023438,23552740328\\n2022-06-30,20108.312500,20141.160156,18729.656250,19784.726563,19784.726563,26267239923\\n2022-07-01,19820.470703,20632.671875,19073.708984,19269.367188,19269.367188,30767551159\\n2022-07-02,19274.835938,19371.748047,19027.082031,19242.255859,19242.255859,18100418740\\n2022-07-03,19242.095703,19558.269531,18966.951172,19297.076172,19297.076172,16390821947\\n2022-07-04,19297.314453,20258.748047,19063.066406,20231.261719,20231.261719,21594638208\\n2022-07-05,20225.353516,20635.466797,19341.232422,20190.115234,20190.115234,26715546990\\n2022-07-06,20194.619141,20595.529297,19823.511719,20548.246094,20548.246094,24598943708\\n2022-07-07,20547.814453,21771.816406,20296.103516,21637.587891,21637.587891,25814972520\\n2022-07-08,21637.154297,22314.941406,21257.453125,21731.117188,21731.117188,49899834488\\n2022-07-09,21716.828125,21877.138672,21445.957031,21592.207031,21592.207031,29641127858\\n2022-07-10,21591.080078,21591.080078,20727.123047,20860.449219,20860.449219,28688807249\\n2022-07-11,20856.353516,20856.353516,19924.539063,19970.556641,19970.556641,24150249025\\n2022-07-12,19970.474609,20043.445313,19308.531250,19323.914063,19323.914063,25810220018\\n2022-07-13,19325.972656,20223.052734,18999.953125,20212.074219,20212.074219,33042430345\\n2022-07-14,20211.466797,20789.894531,19689.257813,20569.919922,20569.919922,31158743333\\n2022-07-15,20573.156250,21138.244141,20397.000000,20836.328125,20836.328125,25905575359\\n2022-07-16,20834.103516,21514.404297,20518.898438,21190.316406,21190.316406,24302954056\\n2022-07-17,21195.041016,21600.640625,20778.179688,20779.343750,20779.343750,22927802083\\n2022-07-18,20781.912109,22633.033203,20781.912109,22485.689453,22485.689453,39974475562\\n2022-07-19,22467.849609,23666.962891,21683.406250,23389.433594,23389.433594,48765202697\\n2022-07-20,23393.191406,24196.818359,23009.949219,23231.732422,23231.732422,42932549127\\n2022-07-21,23233.201172,23388.322266,22431.148438,23164.628906,23164.628906,33631012204\\n2022-07-22,23163.751953,23671.927734,22603.416016,22714.978516,22714.978516,31421555646\\n2022-07-23,22706.984375,22977.210938,22002.910156,22465.478516,22465.478516,24021799169\\n2022-07-24,22465.509766,22974.001953,22306.839844,22609.164063,22609.164063,23565495303\\n2022-07-25,22607.156250,22649.121094,21361.642578,21361.701172,21361.701172,35574561406\\n2022-07-26,21361.121094,21361.121094,20776.816406,21239.753906,21239.753906,28624673855\\n2022-07-27,21244.169922,22986.529297,21070.806641,22930.548828,22930.548828,31758955233\\n2022-07-28,22933.640625,24110.470703,22722.265625,23843.886719,23843.886719,40212386158\\n2022-07-29,23845.212891,24294.787109,23481.173828,23804.632813,23804.632813,35887249746\\n2022-07-30,23796.818359,24572.580078,23580.507813,23656.207031,23656.207031,28148218301\\n2022-07-31,23652.070313,24121.642578,23275.703125,23336.896484,23336.896484,23553591896\\n2022-08-01,23336.718750,23464.787109,22890.796875,23314.199219,23314.199219,25849159141\\n2022-08-02,23308.433594,23415.041016,22710.083984,22978.117188,22978.117188,28389250717\\n2022-08-03,22981.302734,23578.650391,22747.835938,22846.507813,22846.507813,26288169966\\n2022-08-04,22848.214844,23198.009766,22485.701172,22630.957031,22630.957031,25120229769\\n2022-08-05,22626.833984,23422.828125,22612.177734,23289.314453,23289.314453,28881249043\\n2022-08-06,23291.423828,23326.562500,22961.279297,22961.279297,22961.279297,15978259885\\n2022-08-07,22963.505859,23359.009766,22894.556641,23175.890625,23175.890625,15886817043\\n2022-08-08,23179.527344,24203.689453,23176.546875,23809.486328,23809.486328,28575544847\\n2022-08-09,23811.484375,23898.615234,22982.000000,23164.318359,23164.318359,23555719219\\n2022-08-10,23162.898438,24127.414063,22771.519531,23947.642578,23947.642578,32837431722\\n2022-08-11,23948.345703,24822.628906,23900.996094,23957.529297,23957.529297,37127036580\\n2022-08-12,23957.203125,24412.566406,23657.265625,24402.818359,24402.818359,27265804688\\n2022-08-13,24402.187500,24860.050781,24346.115234,24424.068359,24424.068359,22987346289\\n2022-08-14,24429.056641,24974.914063,24206.259766,24319.333984,24319.333984,22994133555\\n2022-08-15,24318.316406,25135.589844,23839.775391,24136.972656,24136.972656,35123501685\\n2022-08-16,24126.136719,24228.416016,23733.500000,23883.291016,23883.291016,27753685646\\n2022-08-17,23881.316406,24407.058594,23243.353516,23335.998047,23335.998047,30931623076\\n2022-08-18,23341.039063,23563.832031,23177.601563,23212.738281,23212.738281,23747613147\\n2022-08-19,23213.312500,23213.312500,20868.847656,20877.552734,20877.552734,40509610260\\n2022-08-20,20872.841797,21350.806641,20856.730469,21166.060547,21166.060547,27595671000\\n2022-08-21,21160.392578,21668.845703,21103.197266,21534.121094,21534.121094,23102307723\\n2022-08-22,21531.462891,21531.462891,20939.183594,21398.908203,21398.908203,31666498758\\n2022-08-23,21401.044922,21646.203125,20955.138672,21528.087891,21528.087891,31878280659\\n2022-08-24,21526.455078,21783.076172,21195.005859,21395.019531,21395.019531,31962253368\\n2022-08-25,21395.458984,21789.636719,21362.441406,21600.904297,21600.904297,31028679593\\n2022-08-26,21596.085938,21804.908203,20199.482422,20260.019531,20260.019531,42326789564\\n2022-08-27,20262.480469,20340.775391,19890.523438,20041.738281,20041.738281,30116729776\\n2022-08-28,20041.035156,20139.054688,19616.814453,19616.814453,19616.814453,24366810591\\n2022-08-29,19615.154297,20357.462891,19600.785156,20297.994141,20297.994141,32637854078\\n2022-08-30,20298.611328,20542.644531,19617.640625,19796.808594,19796.808594,34483360283\\n2022-08-31,19799.582031,20420.990234,19799.582031,20049.763672,20049.763672,33225232872\\n2022-09-01,20050.498047,20198.390625,19653.968750,20127.140625,20127.140625,30182031010\\n2022-09-02,20126.072266,20401.568359,19814.765625,19969.771484,19969.771484,29123998928\\n2022-09-03,19969.718750,20037.009766,19698.355469,19832.087891,19832.087891,23613051457\\n2022-09-04,19832.470703,19999.689453,19636.816406,19986.712891,19986.712891,25245861652\\n2022-09-05,19988.789063,20031.160156,19673.046875,19812.371094,19812.371094,28813460025\\n2022-09-06,19817.724609,20155.269531,18800.171875,18837.667969,18837.667969,43403978910\\n2022-09-07,18837.683594,19427.171875,18644.466797,19290.324219,19290.324219,35239757134\\n2022-09-08,19289.941406,19417.351563,19076.714844,19329.833984,19329.833984,32194477850\\n2022-09-09,19328.140625,21439.410156,19310.962891,21381.152344,21381.152344,48469528171\\n2022-09-10,21376.912109,21760.275391,21168.722656,21680.539063,21680.539063,36913738894\\n2022-09-11,21678.542969,21770.552734,21406.945313,21769.255859,21769.255859,34493951963\\n2022-09-12,21770.148438,22439.181641,21603.896484,22370.449219,22370.449219,50212088965\\n2022-09-13,22371.480469,22673.820313,20062.669922,20296.707031,20296.707031,51091116622\\n2022-09-14,20184.554688,20467.201172,19793.396484,20241.089844,20241.089844,37872380889\\n2022-09-15,20242.289063,20318.166016,19636.734375,19701.210938,19701.210938,36389011503\\n2022-09-16,19704.005859,19870.628906,19400.076172,19772.583984,19772.583984,30123362273\\n2022-09-17,19777.033203,20162.531250,19777.033203,20127.576172,20127.576172,24957448100\\n2022-09-18,20127.234375,20127.234375,19387.492188,19419.505859,19419.505859,31254779144\\n2022-09-19,19418.572266,19639.480469,18390.318359,19544.128906,19544.128906,40177002624\\n2022-09-20,19545.591797,19602.457031,18813.455078,18890.789063,18890.789063,36791346508\\n2022-09-21,18891.283203,19674.630859,18290.314453,18547.400391,18547.400391,46363793975\\n2022-09-22,18534.650391,19456.910156,18415.591797,19413.550781,19413.550781,41135767926\\n2022-09-23,19412.400391,19464.671875,18617.552734,19297.638672,19297.638672,38896078052\\n2022-09-24,19296.990234,19310.197266,18861.974609,18937.011719,18937.011719,26149643168\\n2022-09-25,18936.310547,19134.732422,18696.468750,18802.097656,18802.097656,23359966112\\n2022-09-26,18803.900391,19274.873047,18721.285156,19222.671875,19222.671875,44148798321\\n2022-09-27,19221.839844,20338.455078,18915.667969,19110.546875,19110.546875,58571439619\\n2022-09-28,19104.621094,19688.343750,18553.296875,19426.720703,19426.720703,53071298734\\n2022-09-29,19427.779297,19589.265625,18924.353516,19573.050781,19573.050781,41037843771\\n2022-09-30,19573.431641,20109.849609,19265.662109,19431.789063,19431.789063,43975248085\\n2022-10-01,19431.105469,19471.154297,19231.082031,19312.095703,19312.095703,18719537670\\n2022-10-02,19311.849609,19370.308594,18970.621094,19044.107422,19044.107422,20765955327\\n2022-10-03,19044.068359,19653.542969,19025.226563,19623.580078,19623.580078,30484729489\\n2022-10-04,19623.583984,20380.343750,19523.839844,20336.843750,20336.843750,35887278685\\n2022-10-05,20335.900391,20343.748047,19801.800781,20160.716797,20160.716797,33223790572\\n2022-10-06,20161.039063,20408.392578,19900.087891,19955.443359,19955.443359,34711412966\\n2022-10-07,19957.558594,20041.085938,19395.792969,19546.849609,19546.849609,29227315390\\n2022-10-08,19546.328125,19601.695313,19299.414063,19416.568359,19416.568359,16437423167\\n2022-10-09,19417.478516,19542.539063,19349.259766,19446.425781,19446.425781,16837262532\\n2022-10-10,19446.416016,19515.466797,19102.978516,19141.484375,19141.484375,27425022774\\n2022-10-11,19139.000000,19241.960938,18925.603516,19051.417969,19051.417969,28711532910\\n2022-10-12,19052.646484,19203.199219,19029.757813,19157.445313,19157.445313,24950173846\\n2022-10-13,19156.966797,19453.328125,18319.822266,19382.904297,19382.904297,44219840004\\n2022-10-14,19382.533203,19889.146484,19115.408203,19185.656250,19185.656250,38452356727\\n2022-10-15,19185.437500,19212.541016,19019.250000,19067.634766,19067.634766,16192235532\\n2022-10-16,19068.914063,19389.603516,19068.914063,19268.093750,19268.093750,17988916650\\n2022-10-17,19268.562500,19635.802734,19173.333984,19550.757813,19550.757813,27472552998\\n2022-10-18,19550.466797,19666.994141,19144.769531,19334.416016,19334.416016,30580012344\\n2022-10-19,19335.027344,19348.416016,19127.687500,19139.535156,19139.535156,22425387184\\n2022-10-20,19138.085938,19315.199219,18971.458984,19053.740234,19053.740234,24493974420\\n2022-10-21,19053.203125,19237.384766,18770.970703,19172.468750,19172.468750,32459287866\\n2022-10-22,19172.380859,19248.068359,19132.244141,19208.189453,19208.189453,16104440957\\n2022-10-23,19207.734375,19646.652344,19124.197266,19567.007813,19567.007813,22128794335\\n2022-10-24,19567.769531,19589.125000,19206.324219,19345.572266,19345.572266,30202235805\\n2022-10-25,19344.964844,20348.412109,19261.447266,20095.857422,20095.857422,47761524910\\n2022-10-26,20092.236328,20938.134766,20076.117188,20770.441406,20770.441406,58895950537\\n2022-10-27,20772.802734,20854.044922,20255.373047,20285.835938,20285.835938,49625110402\\n2022-10-28,20287.957031,20724.980469,20086.068359,20595.351563,20595.351563,43994715910\\n2022-10-29,20595.103516,20988.394531,20566.484375,20818.476563,20818.476563,40369840645\\n2022-10-30,20817.982422,20917.005859,20547.462891,20635.603516,20635.603516,31486345556\\n2022-10-31,20633.695313,20795.320313,20287.458984,20495.773438,20495.773438,45668466815\\n2022-11-01,20494.898438,20647.289063,20359.845703,20485.273438,20485.273438,39819303159\\n2022-11-02,20482.958984,20742.810547,20087.134766,20159.503906,20159.503906,55552169483\\n2022-11-03,20162.689453,20382.095703,20086.240234,20209.988281,20209.988281,43228750179\\n2022-11-04,20208.769531,21209.560547,20188.019531,21147.230469,21147.230469,64072727950\\n2022-11-05,21144.832031,21446.886719,21097.634766,21282.691406,21282.691406,37846047609\\n2022-11-06,21285.056641,21345.376953,20920.191406,20926.486328,20926.486328,35082693210\\n2022-11-07,20924.621094,21053.246094,20489.972656,20602.816406,20602.816406,53510852236\\n2022-11-08,20600.671875,20664.607422,17603.544922,18541.271484,18541.271484,118992465607\\n2022-11-09,18543.761719,18590.458984,15682.692383,15880.780273,15880.780273,102905151606\\n2022-11-10,15883.158203,18054.312500,15834.018555,17586.771484,17586.771484,83202283721\\n2022-11-11,17583.251953,17650.943359,16543.482422,17034.292969,17034.292969,55871616488\\n2022-11-12,17036.875000,17066.675781,16651.775391,16799.185547,16799.185547,29717699419\\n2022-11-13,16799.722656,16920.765625,16320.634766,16353.365234,16353.365234,27209183682\\n2022-11-14,16352.028320,17109.324219,15872.941406,16618.199219,16618.199219,49630243054\\n2022-11-15,16617.484375,17051.962891,16542.550781,16884.613281,16884.613281,36599436183\\n2022-11-16,16884.341797,16960.294922,16430.111328,16669.439453,16669.439453,33925512989\\n2022-11-17,16670.425781,16726.439453,16460.683594,16687.517578,16687.517578,27868914022\\n2022-11-18,16687.912109,16947.058594,16564.611328,16697.777344,16697.777344,26862218609\\n2022-11-19,16696.220703,16797.876953,16570.410156,16711.546875,16711.546875,16106223492\\n2022-11-20,16712.919922,16746.779297,16248.692383,16291.832031,16291.832031,21313378652\\n2022-11-21,16291.223633,16291.223633,15599.046875,15787.284180,15787.284180,37429485518\\n2022-11-22,15782.300781,16253.047852,15656.606445,16189.769531,16189.769531,30726828760\\n2022-11-23,16195.588867,16638.193359,16170.502930,16610.707031,16610.707031,32958875628\\n2022-11-24,16611.636719,16771.474609,16501.767578,16604.464844,16604.464844,26129037414\\n2022-11-25,16602.269531,16603.316406,16388.404297,16521.841797,16521.841797,18678255976\\n2022-11-26,16521.576172,16666.863281,16416.228516,16464.281250,16464.281250,18000008764\\n2022-11-27,16463.882813,16594.406250,16437.025391,16444.626953,16444.626953,20443898509\\n2022-11-28,16440.222656,16482.933594,16054.530273,16217.322266,16217.322266,27743025156\\n2022-11-29,16217.639648,16522.257813,16139.396484,16444.982422,16444.982422,23581685468\\n2022-11-30,16445.476563,17190.937500,16445.476563,17168.566406,17168.566406,29523576583\\n2022-12-01,17168.001953,17197.498047,16888.388672,16967.132813,16967.132813,22895392882\\n2022-12-02,16968.683594,17088.660156,16877.880859,17088.660156,17088.660156,19539705127\\n2022-12-03,17090.097656,17116.041016,16888.140625,16908.236328,16908.236328,16217776704\\n2022-12-04,16908.169922,17157.767578,16903.439453,17130.486328,17130.486328,16824520830\\n2022-12-05,17128.894531,17378.152344,16922.431641,16974.826172,16974.826172,22209086834\\n2022-12-06,16975.238281,17091.863281,16939.921875,17089.503906,17089.503906,19889922369\\n2022-12-07,17089.505859,17109.376953,16750.558594,16848.126953,16848.126953,19675404389\\n2022-12-08,16847.349609,17267.916016,16788.783203,17233.474609,17233.474609,20496603770\\n2022-12-09,17232.148438,17280.546875,17100.835938,17133.152344,17133.152344,20328426366\\n2022-12-10,17134.220703,17216.826172,17120.683594,17128.724609,17128.724609,12706781969\\n2022-12-11,17129.710938,17245.634766,17091.820313,17104.193359,17104.193359,14122486832\\n2022-12-12,17102.500000,17212.564453,16899.394531,17206.437500,17206.437500,19617581341\\n2022-12-13,17206.441406,17930.085938,17111.763672,17781.318359,17781.318359,26634741631\\n2022-12-14,17782.066406,18318.531250,17739.513672,17815.650391,17815.650391,25534481470\\n2022-12-15,17813.644531,17846.744141,17322.589844,17364.865234,17364.865234,20964448341\\n2022-12-16,17364.546875,17505.525391,16584.701172,16647.484375,16647.484375,24031608960\\n2022-12-17,16646.982422,16800.589844,16614.029297,16795.091797,16795.091797,14463581825\\n2022-12-18,16795.609375,16815.386719,16697.820313,16757.976563,16757.976563,10924354698\\n2022-12-19,16759.041016,16807.527344,16398.136719,16439.679688,16439.679688,17221074814\\n2022-12-20,16441.787109,17012.984375,16427.867188,16906.304688,16906.304688,22722096615\\n2022-12-21,16904.527344,16916.800781,16755.912109,16817.535156,16817.535156,14882945045\\n2022-12-22,16818.380859,16866.673828,16592.408203,16830.341797,16830.341797,16441573050\\n2022-12-23,16829.644531,16905.218750,16794.458984,16796.953125,16796.953125,15329265213\\n2022-12-24,16796.976563,16864.703125,16793.527344,16847.755859,16847.755859,9744636213\\n2022-12-25,16847.505859,16860.554688,16755.253906,16841.986328,16841.986328,11656379938\\n2022-12-26,16842.250000,16920.123047,16812.369141,16919.804688,16919.804688,11886957804\\n2022-12-27,16919.291016,16959.845703,16642.072266,16717.173828,16717.173828,15748580239\\n2022-12-28,16716.400391,16768.169922,16497.556641,16552.572266,16552.572266,17005713920\\n2022-12-29,16552.322266,16651.755859,16508.683594,16642.341797,16642.341797,14472237479\\n2022-12-30,16641.330078,16643.427734,16408.474609,16602.585938,16602.585938,15929162910\\n2022-12-31,16603.673828,16628.986328,16517.519531,16547.496094,16547.496094,11239186456\\n2023-01-01,16547.914063,16630.439453,16521.234375,16625.080078,16625.080078,9244361700\\n2023-01-02,16625.509766,16759.343750,16572.228516,16688.470703,16688.470703,12097775227\\n2023-01-03,16688.847656,16760.447266,16622.371094,16679.857422,16679.857422,13903079207\\n2023-01-04,16680.205078,16964.585938,16667.763672,16863.238281,16863.238281,18421743322\\n2023-01-05,16863.472656,16884.021484,16790.283203,16836.736328,16836.736328,13692758566\\n2023-01-06,16836.472656,16991.994141,16716.421875,16951.968750,16951.968750,14413662913\\n2023-01-07,16952.117188,16975.017578,16914.191406,16955.078125,16955.078125,7714767174\\n2023-01-08,16954.146484,17091.144531,16924.050781,17091.144531,17091.144531,9768827914\\n2023-01-09,17093.992188,17389.957031,17093.992188,17196.554688,17196.554688,18624736866\\n2023-01-10,17192.949219,17484.720703,17162.990234,17446.292969,17446.292969,15808338949\\n2023-01-11,17446.359375,17934.896484,17337.994141,17934.896484,17934.896484,18372283782\\n2023-01-12,18117.593750,19030.087891,17995.203125,18869.587891,18869.587891,34971338710\\n2023-01-13,18868.906250,19964.322266,18753.164063,19909.574219,19909.574219,29225029694\\n2023-01-14,19910.537109,21075.142578,19907.828125,20976.298828,20976.298828,38967784639\\n2023-01-15,20977.484375,20993.748047,20606.986328,20880.798828,20880.798828,19298407543\\n2023-01-16,20882.224609,21360.875000,20715.746094,21169.632813,21169.632813,26792494050\\n2023-01-17,21175.833984,21438.660156,20978.533203,21161.519531,21161.519531,24999983362\\n2023-01-18,21161.050781,21564.501953,20541.544922,20688.781250,20688.781250,30005625418\\n2023-01-19,20686.746094,21163.011719,20685.380859,21086.792969,21086.792969,21152848261\\n2023-01-20,21085.373047,22692.357422,20919.126953,22676.552734,22676.552734,28799154319\\n2023-01-21,22677.427734,23282.347656,22511.833984,22777.625000,22777.625000,32442278429\\n2023-01-22,22777.986328,23056.730469,22387.900391,22720.416016,22720.416016,24746386230\\n2023-01-23,22721.087891,23126.486328,22654.304688,22934.431641,22934.431641,26518700512\\n2023-01-24,22929.626953,23134.011719,22549.744141,22636.468750,22636.468750,26405069715\\n2023-01-25,22639.267578,23722.099609,22406.076172,23117.859375,23117.859375,30685366709\\n2023-01-26,23108.955078,23237.078125,22911.373047,23032.777344,23032.777344,26357839322\\n2023-01-27,23030.716797,23417.720703,22654.593750,23078.728516,23078.728516,25383335641\\n2023-01-28,23079.964844,23165.896484,22908.845703,23031.089844,23031.089844,14712928379\\n2023-01-29,23031.449219,23919.890625,22985.070313,23774.566406,23774.566406,27423687259\\n2023-01-30,23774.648438,23789.347656,22657.582031,22840.138672,22840.138672,27205595568\\n2023-01-31,22840.796875,23225.021484,22765.568359,23139.283203,23139.283203,22837828665\\n2023-02-01,23137.835938,23764.539063,22877.750000,23723.769531,23723.769531,26683255504\\n2023-02-02,23720.824219,24167.210938,23468.595703,23471.871094,23471.871094,32066936882\\n2023-02-03,23469.412109,23678.103516,23279.955078,23449.322266,23449.322266,27083066007\\n2023-02-04,23446.320313,23556.949219,23291.794922,23331.847656,23331.847656,15639298538\\n2023-02-05,23332.248047,23423.435547,22841.759766,22955.666016,22955.666016,19564262605\\n2023-02-06,22954.021484,23119.279297,22692.025391,22760.109375,22760.109375,23825006542\\n2023-02-07,22764.498047,22935.509766,22764.498047,22935.509766,22935.509766,24098310144'}"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#importing data\n",
        "df = pd.read_csv('dot.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 655
        },
        "id": "bvRsDByyIMOp",
        "outputId": "b69f72c1-51af-4e39-80ae-e709bbb2eb70"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Date          Open          High           Low         Close  \\\n",
              "0    2022-02-07  42406.781250  44401.863281  41748.156250  43840.285156   \n",
              "1    2022-02-08  43854.652344  45293.867188  42807.835938  44118.445313   \n",
              "2    2022-02-09  44096.703125  44727.800781  43232.968750  44338.796875   \n",
              "3    2022-02-10  44347.800781  45661.171875  43402.808594  43565.113281   \n",
              "4    2022-02-11  43571.128906  43810.832031  42114.539063  42407.937500   \n",
              "..          ...           ...           ...           ...           ...   \n",
              "361  2023-02-03  23469.412109  23678.103516  23279.955078  23449.322266   \n",
              "362  2023-02-04  23446.320313  23556.949219  23291.794922  23331.847656   \n",
              "363  2023-02-05  23332.248047  23423.435547  22841.759766  22955.666016   \n",
              "364  2023-02-06  22954.021484  23119.279297  22692.025391  22760.109375   \n",
              "365  2023-02-07  22764.498047  22935.509766  22764.498047  22935.509766   \n",
              "\n",
              "        Adj Close       Volume  \n",
              "0    43840.285156  28641855926  \n",
              "1    44118.445313  33079398868  \n",
              "2    44338.796875  23245887300  \n",
              "3    43565.113281  32142048537  \n",
              "4    42407.937500  26954925781  \n",
              "..            ...          ...  \n",
              "361  23449.322266  27083066007  \n",
              "362  23331.847656  15639298538  \n",
              "363  22955.666016  19564262605  \n",
              "364  22760.109375  23825006542  \n",
              "365  22935.509766  24098310144  \n",
              "\n",
              "[366 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd82b43d-9063-4336-a9a0-38f45090f7a9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-02-07</td>\n",
              "      <td>42406.781250</td>\n",
              "      <td>44401.863281</td>\n",
              "      <td>41748.156250</td>\n",
              "      <td>43840.285156</td>\n",
              "      <td>43840.285156</td>\n",
              "      <td>28641855926</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-02-08</td>\n",
              "      <td>43854.652344</td>\n",
              "      <td>45293.867188</td>\n",
              "      <td>42807.835938</td>\n",
              "      <td>44118.445313</td>\n",
              "      <td>44118.445313</td>\n",
              "      <td>33079398868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-02-09</td>\n",
              "      <td>44096.703125</td>\n",
              "      <td>44727.800781</td>\n",
              "      <td>43232.968750</td>\n",
              "      <td>44338.796875</td>\n",
              "      <td>44338.796875</td>\n",
              "      <td>23245887300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-02-10</td>\n",
              "      <td>44347.800781</td>\n",
              "      <td>45661.171875</td>\n",
              "      <td>43402.808594</td>\n",
              "      <td>43565.113281</td>\n",
              "      <td>43565.113281</td>\n",
              "      <td>32142048537</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>43571.128906</td>\n",
              "      <td>43810.832031</td>\n",
              "      <td>42114.539063</td>\n",
              "      <td>42407.937500</td>\n",
              "      <td>42407.937500</td>\n",
              "      <td>26954925781</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>361</th>\n",
              "      <td>2023-02-03</td>\n",
              "      <td>23469.412109</td>\n",
              "      <td>23678.103516</td>\n",
              "      <td>23279.955078</td>\n",
              "      <td>23449.322266</td>\n",
              "      <td>23449.322266</td>\n",
              "      <td>27083066007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>2023-02-04</td>\n",
              "      <td>23446.320313</td>\n",
              "      <td>23556.949219</td>\n",
              "      <td>23291.794922</td>\n",
              "      <td>23331.847656</td>\n",
              "      <td>23331.847656</td>\n",
              "      <td>15639298538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>2023-02-05</td>\n",
              "      <td>23332.248047</td>\n",
              "      <td>23423.435547</td>\n",
              "      <td>22841.759766</td>\n",
              "      <td>22955.666016</td>\n",
              "      <td>22955.666016</td>\n",
              "      <td>19564262605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>2023-02-06</td>\n",
              "      <td>22954.021484</td>\n",
              "      <td>23119.279297</td>\n",
              "      <td>22692.025391</td>\n",
              "      <td>22760.109375</td>\n",
              "      <td>22760.109375</td>\n",
              "      <td>23825006542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>2023-02-07</td>\n",
              "      <td>22764.498047</td>\n",
              "      <td>22935.509766</td>\n",
              "      <td>22764.498047</td>\n",
              "      <td>22935.509766</td>\n",
              "      <td>22935.509766</td>\n",
              "      <td>24098310144</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>366 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd82b43d-9063-4336-a9a0-38f45090f7a9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bd82b43d-9063-4336-a9a0-38f45090f7a9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bd82b43d-9063-4336-a9a0-38f45090f7a9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#importing the data\n",
        "df = pd.read_csv('dot.csv')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        },
        "id": "eHsQeMLyCVwC",
        "outputId": "a06edd26-18b9-4bdc-b967-ec94b15a82fc"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date          Open          High           Low         Close  \\\n",
              "0  2022-02-07  42406.781250  44401.863281  41748.156250  43840.285156   \n",
              "1  2022-02-08  43854.652344  45293.867188  42807.835938  44118.445313   \n",
              "2  2022-02-09  44096.703125  44727.800781  43232.968750  44338.796875   \n",
              "3  2022-02-10  44347.800781  45661.171875  43402.808594  43565.113281   \n",
              "4  2022-02-11  43571.128906  43810.832031  42114.539063  42407.937500   \n",
              "\n",
              "      Adj Close       Volume  \n",
              "0  43840.285156  28641855926  \n",
              "1  44118.445313  33079398868  \n",
              "2  44338.796875  23245887300  \n",
              "3  43565.113281  32142048537  \n",
              "4  42407.937500  26954925781  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7a4cd33-32ad-4e77-93ee-4116302a10f6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-02-07</td>\n",
              "      <td>42406.781250</td>\n",
              "      <td>44401.863281</td>\n",
              "      <td>41748.156250</td>\n",
              "      <td>43840.285156</td>\n",
              "      <td>43840.285156</td>\n",
              "      <td>28641855926</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-02-08</td>\n",
              "      <td>43854.652344</td>\n",
              "      <td>45293.867188</td>\n",
              "      <td>42807.835938</td>\n",
              "      <td>44118.445313</td>\n",
              "      <td>44118.445313</td>\n",
              "      <td>33079398868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-02-09</td>\n",
              "      <td>44096.703125</td>\n",
              "      <td>44727.800781</td>\n",
              "      <td>43232.968750</td>\n",
              "      <td>44338.796875</td>\n",
              "      <td>44338.796875</td>\n",
              "      <td>23245887300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-02-10</td>\n",
              "      <td>44347.800781</td>\n",
              "      <td>45661.171875</td>\n",
              "      <td>43402.808594</td>\n",
              "      <td>43565.113281</td>\n",
              "      <td>43565.113281</td>\n",
              "      <td>32142048537</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>43571.128906</td>\n",
              "      <td>43810.832031</td>\n",
              "      <td>42114.539063</td>\n",
              "      <td>42407.937500</td>\n",
              "      <td>42407.937500</td>\n",
              "      <td>26954925781</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7a4cd33-32ad-4e77-93ee-4116302a10f6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a7a4cd33-32ad-4e77-93ee-4116302a10f6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a7a4cd33-32ad-4e77-93ee-4116302a10f6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#importing the data\n",
        "df = pd.read_csv('dot.csv')\n",
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        },
        "id": "A2nGKlmLEkz6",
        "outputId": "a1bb66eb-241f-49f5-e3ff-fea6159ea1e1"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Date          Open          High           Low         Close  \\\n",
              "361  2023-02-03  23469.412109  23678.103516  23279.955078  23449.322266   \n",
              "362  2023-02-04  23446.320313  23556.949219  23291.794922  23331.847656   \n",
              "363  2023-02-05  23332.248047  23423.435547  22841.759766  22955.666016   \n",
              "364  2023-02-06  22954.021484  23119.279297  22692.025391  22760.109375   \n",
              "365  2023-02-07  22764.498047  22935.509766  22764.498047  22935.509766   \n",
              "\n",
              "        Adj Close       Volume  \n",
              "361  23449.322266  27083066007  \n",
              "362  23331.847656  15639298538  \n",
              "363  22955.666016  19564262605  \n",
              "364  22760.109375  23825006542  \n",
              "365  22935.509766  24098310144  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3e63f98-019a-45aa-8d92-09966635e61c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>361</th>\n",
              "      <td>2023-02-03</td>\n",
              "      <td>23469.412109</td>\n",
              "      <td>23678.103516</td>\n",
              "      <td>23279.955078</td>\n",
              "      <td>23449.322266</td>\n",
              "      <td>23449.322266</td>\n",
              "      <td>27083066007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>2023-02-04</td>\n",
              "      <td>23446.320313</td>\n",
              "      <td>23556.949219</td>\n",
              "      <td>23291.794922</td>\n",
              "      <td>23331.847656</td>\n",
              "      <td>23331.847656</td>\n",
              "      <td>15639298538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>2023-02-05</td>\n",
              "      <td>23332.248047</td>\n",
              "      <td>23423.435547</td>\n",
              "      <td>22841.759766</td>\n",
              "      <td>22955.666016</td>\n",
              "      <td>22955.666016</td>\n",
              "      <td>19564262605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>2023-02-06</td>\n",
              "      <td>22954.021484</td>\n",
              "      <td>23119.279297</td>\n",
              "      <td>22692.025391</td>\n",
              "      <td>22760.109375</td>\n",
              "      <td>22760.109375</td>\n",
              "      <td>23825006542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>2023-02-07</td>\n",
              "      <td>22764.498047</td>\n",
              "      <td>22935.509766</td>\n",
              "      <td>22764.498047</td>\n",
              "      <td>22935.509766</td>\n",
              "      <td>22935.509766</td>\n",
              "      <td>24098310144</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3e63f98-019a-45aa-8d92-09966635e61c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b3e63f98-019a-45aa-8d92-09966635e61c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b3e63f98-019a-45aa-8d92-09966635e61c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#size of the data\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "tl1TJeOOC5fm",
        "outputId": "636c2582-7f30-4971-b05d-167bdb4a139e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(366, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#descripptive statics measure of the data\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "xUtFNu6UDIbl",
        "outputId": "d7695e3d-3081-4308-8005-9f23bff14f0b"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Open          High           Low         Close     Adj Close  \\\n",
              "count    366.000000    366.000000    366.000000    366.000000    366.000000   \n",
              "mean   26200.093857  26702.243234  25631.477198  26147.071471  26147.071471   \n",
              "std     9443.013257   9652.846925   9202.905586   9407.236061   9407.236061   \n",
              "min    15782.300781  16253.047852  15599.046875  15787.284180  15787.284180   \n",
              "25%    19326.514648  19636.722168  19025.690430  19325.394043  19325.394043   \n",
              "50%    21616.620118  22377.061524  21084.220703  21619.246094  21619.246094   \n",
              "75%    33493.150391  33815.632813  31038.854004  31775.830567  31775.830567   \n",
              "max    47456.898438  48086.835938  47100.437500  47465.730469  47465.730469   \n",
              "\n",
              "             Volume  \n",
              "count  3.660000e+02  \n",
              "mean   2.941960e+10  \n",
              "std    1.239190e+10  \n",
              "min    7.714767e+09  \n",
              "25%    2.214887e+10  \n",
              "50%    2.771707e+10  \n",
              "75%    3.375638e+10  \n",
              "max    1.189925e+11  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b024ee34-145e-4dbb-8039-420dd54ef964\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>366.000000</td>\n",
              "      <td>366.000000</td>\n",
              "      <td>366.000000</td>\n",
              "      <td>366.000000</td>\n",
              "      <td>366.000000</td>\n",
              "      <td>3.660000e+02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>26200.093857</td>\n",
              "      <td>26702.243234</td>\n",
              "      <td>25631.477198</td>\n",
              "      <td>26147.071471</td>\n",
              "      <td>26147.071471</td>\n",
              "      <td>2.941960e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9443.013257</td>\n",
              "      <td>9652.846925</td>\n",
              "      <td>9202.905586</td>\n",
              "      <td>9407.236061</td>\n",
              "      <td>9407.236061</td>\n",
              "      <td>1.239190e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>15782.300781</td>\n",
              "      <td>16253.047852</td>\n",
              "      <td>15599.046875</td>\n",
              "      <td>15787.284180</td>\n",
              "      <td>15787.284180</td>\n",
              "      <td>7.714767e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>19326.514648</td>\n",
              "      <td>19636.722168</td>\n",
              "      <td>19025.690430</td>\n",
              "      <td>19325.394043</td>\n",
              "      <td>19325.394043</td>\n",
              "      <td>2.214887e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>21616.620118</td>\n",
              "      <td>22377.061524</td>\n",
              "      <td>21084.220703</td>\n",
              "      <td>21619.246094</td>\n",
              "      <td>21619.246094</td>\n",
              "      <td>2.771707e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>33493.150391</td>\n",
              "      <td>33815.632813</td>\n",
              "      <td>31038.854004</td>\n",
              "      <td>31775.830567</td>\n",
              "      <td>31775.830567</td>\n",
              "      <td>3.375638e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>47456.898438</td>\n",
              "      <td>48086.835938</td>\n",
              "      <td>47100.437500</td>\n",
              "      <td>47465.730469</td>\n",
              "      <td>47465.730469</td>\n",
              "      <td>1.189925e+11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b024ee34-145e-4dbb-8039-420dd54ef964')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b024ee34-145e-4dbb-8039-420dd54ef964 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b024ee34-145e-4dbb-8039-420dd54ef964');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#how to occupy the size of the data\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "54XToXHJDMm0",
        "outputId": "a1a0e015-cd4d-4abb-9c12-4fc9886bc849"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 366 entries, 0 to 365\n",
            "Data columns (total 7 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   Date       366 non-null    object \n",
            " 1   Open       366 non-null    float64\n",
            " 2   High       366 non-null    float64\n",
            " 3   Low        366 non-null    float64\n",
            " 4   Close      366 non-null    float64\n",
            " 5   Adj Close  366 non-null    float64\n",
            " 6   Volume     366 non-null    int64  \n",
            "dtypes: float64(5), int64(1), object(1)\n",
            "memory usage: 20.1+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#variation of bitcoin\n",
        "plt.figure(figsize=(15, 5))\n",
        "plt.plot(df['Close'])\n",
        "plt.title('Bitcoin Close price.', fontsize=15)\n",
        "plt.ylabel('Price in dollars.')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 338
        },
        "id": "N-7a-7O1DQak",
        "outputId": "33904a89-b0c4-4859-9004-ca4ed9df29eb"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The prices of the Bitcoin stocks are showing an upward trend as depicted by the plot of the closing price of the stocks.\n",
        "df[df['Close'] == df['Adj Close']].shape, df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "dpdWiD1hDUUM",
        "outputId": "db1309c6-8975-4fca-fef5-adeed4f7ddd3"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((366, 7), (366, 7))"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#drop adj close\n",
        "df = df.drop(['Adj Close'], axis=1)"
      ],
      "metadata": {
        "id": "gHFDPqGQDYj8"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#sum of null values column wise\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "siXhTwzdDbaL",
        "outputId": "a3141971-849f-4fd4-c269-895d835ddb9b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date      0\n",
              "Open      0\n",
              "High      0\n",
              "Low       0\n",
              "Close     0\n",
              "Volume    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Distribution plot \n",
        "features = ['Open', 'High', 'Low', 'Close']\n",
        " \n",
        "plt.subplots(figsize=(20,10))\n",
        "for i, col in enumerate(features):\n",
        "  plt.subplot(2,2,i+1)\n",
        "  sb.distplot(df[col])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 775
        },
        "id": "vGBX9QVjDfwd",
        "outputId": "098b9aee-5fa3-463f-8b8a-4e82a2dfe189"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Boxplot of \n",
        "plt.subplots(figsize=(20,10))\n",
        "for i, col in enumerate(features):\n",
        "  plt.subplot(2,2,i+1)\n",
        "  sb.boxplot(df[col])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 765
        },
        "id": "I1QTcOciDk1F",
        "outputId": "a8536038-c921-4f70-e3b5-872fd9888520"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#First five rows of the data\n",
        "splitted = df['Date'].str.split('-', expand=True)\n",
        " \n",
        "df['year'] = splitted[0].astype('int')\n",
        "df['month'] = splitted[1].astype('int')\n",
        "df['day'] = splitted[2].astype('int')\n",
        " \n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "0_mSUPXrDopU",
        "outputId": "6bc74ce2-e470-46b4-eff0-0ce6a52be587"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date          Open          High           Low         Close  \\\n",
              "0  2022-02-07  42406.781250  44401.863281  41748.156250  43840.285156   \n",
              "1  2022-02-08  43854.652344  45293.867188  42807.835938  44118.445313   \n",
              "2  2022-02-09  44096.703125  44727.800781  43232.968750  44338.796875   \n",
              "3  2022-02-10  44347.800781  45661.171875  43402.808594  43565.113281   \n",
              "4  2022-02-11  43571.128906  43810.832031  42114.539063  42407.937500   \n",
              "\n",
              "        Volume  year  month  day  \n",
              "0  28641855926  2022      2    7  \n",
              "1  33079398868  2022      2    8  \n",
              "2  23245887300  2022      2    9  \n",
              "3  32142048537  2022      2   10  \n",
              "4  26954925781  2022      2   11  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b231303c-99cd-407a-ba86-1532397828e0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-02-07</td>\n",
              "      <td>42406.781250</td>\n",
              "      <td>44401.863281</td>\n",
              "      <td>41748.156250</td>\n",
              "      <td>43840.285156</td>\n",
              "      <td>28641855926</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-02-08</td>\n",
              "      <td>43854.652344</td>\n",
              "      <td>45293.867188</td>\n",
              "      <td>42807.835938</td>\n",
              "      <td>44118.445313</td>\n",
              "      <td>33079398868</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-02-09</td>\n",
              "      <td>44096.703125</td>\n",
              "      <td>44727.800781</td>\n",
              "      <td>43232.968750</td>\n",
              "      <td>44338.796875</td>\n",
              "      <td>23245887300</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-02-10</td>\n",
              "      <td>44347.800781</td>\n",
              "      <td>45661.171875</td>\n",
              "      <td>43402.808594</td>\n",
              "      <td>43565.113281</td>\n",
              "      <td>32142048537</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>43571.128906</td>\n",
              "      <td>43810.832031</td>\n",
              "      <td>42114.539063</td>\n",
              "      <td>42407.937500</td>\n",
              "      <td>26954925781</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b231303c-99cd-407a-ba86-1532397828e0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b231303c-99cd-407a-ba86-1532397828e0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b231303c-99cd-407a-ba86-1532397828e0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Barplot of the mean price\n",
        "data_grouped = df.groupby('year').mean()\n",
        "plt.subplots(figsize=(20,10))\n",
        "for i, col in enumerate(['Open', 'High', 'Low', 'Close']):\n",
        "  plt.subplot(2,2,i+1)\n",
        "  data_grouped[col].plot.bar()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "rGMganvfDr88",
        "outputId": "4249f891-826f-40a2-a23f-ea22b24a7540"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#First five rows of the data\n",
        "df['is_quarter_end'] = np.where(df['month']%3==0,1,0)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZiPUYyfLDyPz",
        "outputId": "1adf2ea8-d6dc-475f-dfd1-4dee689cdbad"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date          Open          High           Low         Close  \\\n",
              "0  2022-02-07  42406.781250  44401.863281  41748.156250  43840.285156   \n",
              "1  2022-02-08  43854.652344  45293.867188  42807.835938  44118.445313   \n",
              "2  2022-02-09  44096.703125  44727.800781  43232.968750  44338.796875   \n",
              "3  2022-02-10  44347.800781  45661.171875  43402.808594  43565.113281   \n",
              "4  2022-02-11  43571.128906  43810.832031  42114.539063  42407.937500   \n",
              "\n",
              "        Volume  year  month  day  is_quarter_end  \n",
              "0  28641855926  2022      2    7               0  \n",
              "1  33079398868  2022      2    8               0  \n",
              "2  23245887300  2022      2    9               0  \n",
              "3  32142048537  2022      2   10               0  \n",
              "4  26954925781  2022      2   11               0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2a913d63-19ed-4740-976d-7219591203f9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>is_quarter_end</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-02-07</td>\n",
              "      <td>42406.781250</td>\n",
              "      <td>44401.863281</td>\n",
              "      <td>41748.156250</td>\n",
              "      <td>43840.285156</td>\n",
              "      <td>28641855926</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-02-08</td>\n",
              "      <td>43854.652344</td>\n",
              "      <td>45293.867188</td>\n",
              "      <td>42807.835938</td>\n",
              "      <td>44118.445313</td>\n",
              "      <td>33079398868</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-02-09</td>\n",
              "      <td>44096.703125</td>\n",
              "      <td>44727.800781</td>\n",
              "      <td>43232.968750</td>\n",
              "      <td>44338.796875</td>\n",
              "      <td>23245887300</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-02-10</td>\n",
              "      <td>44347.800781</td>\n",
              "      <td>45661.171875</td>\n",
              "      <td>43402.808594</td>\n",
              "      <td>43565.113281</td>\n",
              "      <td>32142048537</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>43571.128906</td>\n",
              "      <td>43810.832031</td>\n",
              "      <td>42114.539063</td>\n",
              "      <td>42407.937500</td>\n",
              "      <td>26954925781</td>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a913d63-19ed-4740-976d-7219591203f9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2a913d63-19ed-4740-976d-7219591203f9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2a913d63-19ed-4740-976d-7219591203f9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#pie chart.\n",
        "df['open-close']  = df['Open'] - df['Close']\n",
        "df['low-high']  = df['Low'] - df['High']\n",
        "df['target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)"
      ],
      "metadata": {
        "id": "KaI39CFfD2YS"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Pie chart for data distribution across two labels\n",
        "plt.pie(df['target'].value_counts().values,\n",
        "        labels=[0, 1], autopct='%1.1f%%')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "_-8yu63-D5h7",
        "outputId": "3b886c33-fc67-4699-c4df-9c56de8d1d16"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Heatmap to find the highly correlated features\n",
        "plt.figure(figsize=(10, 10))\n",
        " \n",
        "# As our concern is with the highly\n",
        "# correlated features only so, we will visualize\n",
        "# our heatmap as per that criteria only.\n",
        "sb.heatmap(df.corr() > 0.9, annot=True, cbar=False)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "bpyrzhARD9C6",
        "outputId": "56c9f8fd-2f22-4634-b718-72f7ed986c57"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ratio\n",
        "features = df[['open-close', 'low-high', 'is_quarter_end']]\n",
        "target = df['target']\n",
        " \n",
        "scaler = StandardScaler()\n",
        "features = scaler.fit_transform(features)\n",
        " \n",
        "X_train, X_valid, Y_train, Y_valid = train_test_split(\n",
        "    features, target, test_size=0.1, random_state=2022)\n",
        "print(X_train.shape, X_valid.shape)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "lJLDOM-YEBHL",
        "outputId": "a1f73537-eff1-44bf-806e-ecdb42030b70"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(329, 3) (37, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Logistic Regression\n",
        "models = [LogisticRegression(), SVC(kernel='poly', probability=True), XGBClassifier()]\n",
        " \n",
        "for i in range(3):\n",
        "  models[i].fit(X_train, Y_train)\n",
        " \n",
        "  print(f'{models[i]} : ')\n",
        "  print('Training Accuracy : ', metrics.roc_auc_score(Y_train, models[i].predict_proba(X_train)[:,1]))\n",
        "  print('Validation Accuracy : ', metrics.roc_auc_score(Y_valid, models[i].predict_proba(X_valid)[:,1]))\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "uRVOoImPEKRq",
        "outputId": "eec23209-4c51-45e1-a63d-df8a01619879"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LogisticRegression() : \n",
            "Training Accuracy :  0.5000742721330956\n",
            "Validation Accuracy :  0.6352941176470589\n",
            "\n",
            "SVC(kernel='poly', probability=True) : \n",
            "Training Accuracy :  0.44377599524658345\n",
            "Validation Accuracy :  0.6088235294117648\n",
            "\n",
            "XGBClassifier() : \n",
            "Training Accuracy :  0.9207887700534759\n",
            "Validation Accuracy :  0.36323529411764705\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Confusion matrix for the validation data\n",
        "metrics.plot_confusion_matrix(models[0], X_valid, Y_valid)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "VLxJnCjNEO2a",
        "outputId": "8d464520-fb74-47e5-afbd-de590a3a528a"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}